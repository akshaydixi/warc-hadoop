apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'nexus' // Releasing to Maven Central via Sonatype OSS

sourceCompatibility = '1.6'

configurations {
    markdownDoclet
}

repositories {
    mavenCentral()
    maven {
        url "http://conjars.org/repo"
    }
    maven {
        url "http://clojars.org/repo"
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.apache.hadoop:hadoop-client:2.2.0'
    compile 'cascading:cascading-core:2.6.0'
    compile 'cascading:cascading-hadoop:2.6.0'
    testCompile 'com.backtype:dfs-datastores:1.3.6'
    testCompile 'junit:junit:4.11'
    testRuntime 'org.slf4j:slf4j-simple:1.7.7'
    markdownDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1'
}

// Allow Markdown in Javadocs: http://blog.paralleluniverse.co/2014/05/01/modern-java/
javadoc.options {
    docletpath = configurations.markdownDoclet.files.asType(List)
    doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
    addStringOption('parse-timeout', '10')
    addStringOption('overview', "$projectDir/README.md")
}

// Add nexus plugin to build: https://github.com/bmuschko/gradle-nexus-plugin
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
    }
}

// Don't want to store GPG passphrase in a file, so ask for it interactively
gradle.taskGraph.whenReady {
    if (signing.required) {
        if (!project.hasProperty('signing.keyId')) {
            throw new Exception('A GnuPG key ID is required for signing. Please set signing.keyId=xxxxxxxx in ~/.gradle/gradle.properties.')
        }

        def keyringFile
        if (project.hasProperty('signing.secretKeyRingFile')) {
            keyringFile = new File(project.'signing.secretKeyRingFile')
        } else {
            keyringFile = new File(new File(System.getProperty('user.home'), '.gnupg'), 'secring.gpg')
        }

        if (keyringFile.exists()) {
            allprojects { ext.'signing.secretKeyRingFile' = keyringFile.getPath() }
        } else {
            throw new Exception("GnuPG secret key file $keyringFile not found. Please set signing.secretKeyRingFile=... in ~/.gradle/gradle.properties.")
        }

        Console console = System.console()
        console.printf "\n\nThis release $project.version will be signed with your GnuPG key ${project.'signing.keyId'} in $keyringFile.\n\n"

        def password = console.readPassword('Please enter your passphrase to unlock the secret key: ')
        allprojects { ext.'signing.password' = password }
    }
}

// Project metadata, as required by http://central.sonatype.org/pages/requirements.html
modifyPom {
    project {
        name 'WARC Input and Output Formats for Hadoop'
        description 'Java library for working with WARC (Web Archive) files in Hadoop MapReduce'
        url 'https://github.com/ept/warc-hadoop'

        scm {
            url 'https://github.com/ept/warc-hadoop'
            connection 'scm:https://github.com/ept/warc-hadoop.git'
            developerConnection 'scm:git@github.com:ept/warc-hadoop.git'
        }

        licenses {
            license {
                name 'The MIT License'
                url 'http://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id 'martinkl'
                name 'Martin Kleppmann'
                email 'martin@kleppmann.com'
                url 'http://martin.kleppmann.com'
            }
        }
    }
}
